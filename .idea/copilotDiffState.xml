<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/app/src/HomeViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/app/src/HomeViewModel.kt" />
              <option name="originalContent" value="package app.src&#10;&#10;import androidx.lifecycle.*&#10;import app.src.data.models.Producto&#10;import app.src.data.repositories.ProductoRepository&#10;import app.src.data.repositories.Result&#10;import kotlinx.coroutines.launch&#10;&#10;/**&#10; * Represents the UI contract for the Home screen.&#10; *&#10; * States:&#10; * - [Loading]: Data is being fetched and the UI should show a progress indicator.&#10; * - [Success]: Data fetched successfully; contains the list of recommended products.&#10; * - [Error]: A user-facing error occurred; contains a message suitable for display.&#10; */&#10;sealed class HomeUiState {&#10;    /** Emitted while recommended products are loading. */&#10;    object Loading : HomeUiState()&#10;&#10;    /**&#10;     * Emitted when recommended products have been loaded successfully.&#10;     *&#10;     * @property productosRecomendados The list of products to render in the UI.&#10;     */&#10;    data class Success(val productosRecomendados: List&lt;Producto&gt;) : HomeUiState()&#10;&#10;    /**&#10;     * Emitted when there is an error loading data.&#10;     *&#10;     * @property message Human-readable message that can be shown to the user.&#10;     */&#10;    data class Error(val message: String) : HomeUiState()&#10;}&#10;&#10;/**&#10; * ViewModel for the Home screen.&#10; *&#10; * Responsibilities:&#10; * - Loads and exposes recommended products via [LiveData].&#10; * - Exposes a high-level UI state ([HomeUiState]) to simplify rendering logic.&#10; * - Handles user interactions originating from recommended products (e.g., item clicks).&#10; *&#10; * Lifecycle:&#10; * - Triggers an initial load of recommended products in [init].&#10; */&#10;class HomeViewModel : ViewModel() {&#10;&#10;    /** Repository used to retrieve product data. */&#10;    private val productoRepository = ProductoRepository()&#10;&#10;    /**&#10;     * Backing field for the UI state.&#10;     * Use [uiState] to observe state changes from the UI layer.&#10;     */&#10;    private val _uiState = MutableLiveData&lt;HomeUiState&gt;()&#10;    val uiState: LiveData&lt;HomeUiState&gt; = _uiState&#10;&#10;    /**&#10;     * Backing field for the list of recommended products.&#10;     * Use [productosRecomendados] to observe data changes from the UI layer.&#10;     */&#10;    private val _productosRecomendados = MutableLiveData&lt;List&lt;Producto&gt;&gt;()&#10;    val productosRecomendados: LiveData&lt;List&lt;Producto&gt;&gt; = _productosRecomendados&#10;&#10;    /**&#10;     * Initializes the ViewModel by starting the initial data load.&#10;     */&#10;    init {&#10;        cargarProductosRecomendados()&#10;    }&#10;&#10;    /**&#10;     * Loads recommended products and updates both [productosRecomendados] and [uiState].&#10;     *&#10;     * Flow:&#10;     * 1) Emits [HomeUiState.Loading].&#10;     * 2) Requests data from [ProductoRepository].&#10;     * 3) On success:&#10;     *    - Updates [_productosRecomendados] with the fetched list.&#10;     *    - Emits [HomeUiState.Success] with the same list.&#10;     * 4) On failure:&#10;     *    - Emits [HomeUiState.Error] with a user-facing message.&#10;     * 5) Any unexpected result falls back to a generic error message.&#10;     */&#10;    fun cargarProductosRecomendados() {&#10;        viewModelScope.launch {&#10;            _uiState.value = HomeUiState.Loading&#10;&#10;            when (val result = productoRepository.obtenerProductosRecomendados()) {&#10;                is Result.Success -&gt; {&#10;                    _productosRecomendados.value = result.data&#10;                    _uiState.value = HomeUiState.Success(result.data)&#10;                }&#10;                is Result.Error -&gt; {&#10;                    _uiState.value = HomeUiState.Error(result.message)&#10;                }&#10;                else -&gt; {&#10;                    _uiState.value = HomeUiState.Error(&quot;Error desconocido&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Handles clicks on a recommended product.&#10;     *&#10;     * Extend this to:&#10;     * - Send analytics events.&#10;     * - Navigate to a product detail screen.&#10;     * - Preload images or additional data for a smoother transition.&#10;     *&#10;     * @param producto The product that was clicked.&#10;     */&#10;    fun onProductoRecomendadoClick(producto: Producto) {&#10;        // Aquí podrías agregar lógica adicional si es necesario&#10;        // Por ejemplo, analytics, tracking, etc.&#10;    }&#10;}" />
              <option name="updatedContent" value="package app.src&#13;&#10;&#13;&#10;import androidx.lifecycle.*&#13;&#10;import app.src.data.models.Producto&#13;&#10;import app.src.data.repositories.ProductoRepository&#13;&#10;import app.src.data.repositories.Result&#13;&#10;import kotlinx.coroutines.launch&#13;&#10;&#13;&#10;/**&#13;&#10; * Represents the UI contract for the Home screen.&#13;&#10; *&#13;&#10; * States:&#13;&#10; * - [Loading]: Data is being fetched and the UI should show a progress indicator.&#13;&#10; * - [Success]: Data fetched successfully; contains the list of recommended products.&#13;&#10; * - [Error]: A user-facing error occurred; contains a message suitable for display.&#13;&#10; */&#13;&#10;sealed class HomeUiState {&#13;&#10;    /** Emitted while recommended products are loading. */&#13;&#10;    object Loading : HomeUiState()&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Emitted when recommended products have been loaded successfully.&#13;&#10;     *&#13;&#10;     * @property productosRecomendados The list of products to render in the UI.&#13;&#10;     */&#13;&#10;    data class Success(val productosRecomendados: List&lt;Producto&gt;) : HomeUiState()&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Emitted when there is an error loading data.&#13;&#10;     *&#13;&#10;     * @property message Human-readable message that can be shown to the user.&#13;&#10;     */&#13;&#10;    data class Error(val message: String) : HomeUiState()&#13;&#10;}&#13;&#10;&#13;&#10;/**&#13;&#10; * ViewModel for the Home screen.&#13;&#10; *&#13;&#10; * Responsibilities:&#13;&#10; * - Loads and exposes recommended products via [LiveData].&#13;&#10; * - Exposes a high-level UI state ([HomeUiState]) to simplify rendering logic.&#13;&#10; * - Handles user interactions originating from recommended products (e.g., item clicks).&#13;&#10; *&#13;&#10; * Lifecycle:&#13;&#10; * - Triggers an initial load of recommended products in [init].&#13;&#10; */&#13;&#10;class HomeViewModel : ViewModel() {&#13;&#10;&#13;&#10;    /** Repository used to retrieve product data. */&#13;&#10;    private val productoRepository = ProductoRepository()&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Backing field for the UI state.&#13;&#10;     * Use [uiState] to observe state changes from the UI layer.&#13;&#10;     */&#13;&#10;    private val _uiState = MutableLiveData&lt;HomeUiState&gt;()&#13;&#10;    val uiState: LiveData&lt;HomeUiState&gt; = _uiState&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Backing field for the list of recommended products.&#13;&#10;     * Use [productosRecomendados] to observe data changes from the UI layer.&#13;&#10;     */&#13;&#10;    private val _productosRecomendados = MutableLiveData&lt;List&lt;Producto&gt;&gt;()&#13;&#10;    val productosRecomendados: LiveData&lt;List&lt;Producto&gt;&gt; = _productosRecomendados&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Initializes the ViewModel by starting the initial data load.&#13;&#10;     */&#13;&#10;    init {&#13;&#10;        cargarProductosRecomendados()&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Loads recommended products and updates both [productosRecomendados] and [uiState].&#13;&#10;     *&#13;&#10;     * Flow:&#13;&#10;     * 1) Emits [HomeUiState.Loading].&#13;&#10;     * 2) Requests data from [ProductoRepository].&#13;&#10;     * 3) On success:&#13;&#10;     *    - Updates [_productosRecomendados] with the fetched list.&#13;&#10;     *    - Emits [HomeUiState.Success] with the same list.&#13;&#10;     * 4) On failure:&#13;&#10;     *    - Emits [HomeUiState.Error] with a user-facing message.&#13;&#10;     * 5) Any unexpected result falls back to a generic error message.&#13;&#10;     */&#13;&#10;    fun cargarProductosRecomendados() {&#13;&#10;        viewModelScope.launch {&#13;&#10;            _uiState.value = HomeUiState.Loading&#13;&#10;&#13;&#10;            when (val result = productoRepository.obtenerProductosRecomendados()) {&#13;&#10;                is Result.Success -&gt; {&#13;&#10;                    // Limitar a máximo 5 productos recomendados&#13;&#10;                    val productosLimitados = result.data.take(5)&#13;&#10;                    _productosRecomendados.value = productosLimitados&#13;&#10;                    _uiState.value = HomeUiState.Success(productosLimitados)&#13;&#10;                }&#13;&#10;                is Result.Error -&gt; {&#13;&#10;                    _uiState.value = HomeUiState.Error(result.message)&#13;&#10;                }&#13;&#10;                else -&gt; {&#13;&#10;                    _uiState.value = HomeUiState.Error(&quot;Error desconocido&quot;)&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Handles clicks on a recommended product.&#13;&#10;     *&#13;&#10;     * Extend this to:&#13;&#10;     * - Send analytics events.&#13;&#10;     * - Navigate to a product detail screen.&#13;&#10;     * - Preload images or additional data for a smoother transition.&#13;&#10;     *&#13;&#10;     * @param producto The product that was clicked.&#13;&#10;     */&#13;&#10;    fun onProductoRecomendadoClick(producto: Producto) {&#13;&#10;        // Aquí podrías agregar lógica adicional si es necesario&#13;&#10;        // Por ejemplo, analytics, tracking, etc.&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>