package app.src.data.repositories

import android.content.Context
import android.util.Log
import app.src.data.api.ApiClient
import app.src.data.models.ProductoConConversiones
import app.src.utils.ConversionCacheManager
import app.src.utils.NetworkUtils

class ConversionesRepository {

    private val productoService = ApiClient.productoService
    private val TAG = "ConversionesRepository"

    suspend fun obtenerConversiones(
        productoId: Int,
        context: Context
    ): Result<ProductoConConversiones> {
        return try {
            // 1. PRIMERO: Verificar si hay datos en cach√© v√°lidos (independiente de internet)
            val cachedData = ConversionCacheManager.getConversion(context, productoId)

            if (cachedData != null) {
                val (data, isValid) = cachedData

                if (isValid) {
                    // El cach√© es v√°lido (menos de 24 horas) - USAR CACH√â
                    Log.d(TAG, "üì¶ Usando cach√© v√°lido (no expirado) - Evitando llamada a API")
                    return Result.Success(data, isFromCache = true, isCacheExpired = false)
                } else {
                    Log.d(TAG, "‚ö†Ô∏è Cach√© expirado (m√°s de 24 horas), intentando actualizar desde API...")
                }
            } else {
                Log.d(TAG, "üì≠ No hay cach√© disponible, obteniendo desde API...")
            }

            // 2. Si el cach√© no existe o est√° expirado, verificar conexi√≥n a internet
            val hasInternet = NetworkUtils.isNetworkAvailable(context) && !ApiClient.forceOfflineMode

            if (hasInternet) {
                // 3. Hay internet: intentar obtener datos frescos de la API
                Log.d(TAG, "üåê Internet disponible, obteniendo datos frescos de la API...")

                try {
                    val response = productoService.obtenerConversionesProducto(productoId)

                    if (response.isSuccessful && response.body() != null) {
                        val data = response.body()!!

                        // 4. Guardar en cach√© para uso futuro
                        ConversionCacheManager.saveConversion(context, productoId, data)

                        Log.d(TAG, "‚úÖ Datos obtenidos de API y guardados en cach√©")
                        Result.Success(data, isFromCache = false, isCacheExpired = false)
                    } else {
                        // Si la API falla, intentar usar cach√© aunque est√© expirado
                        Log.w(TAG, "‚ö†Ô∏è API respondi√≥ con error, usando cach√© expirado como respaldo...")
                        usarCacheExpiradoComoUltimoRecurso(cachedData)
                    }
                } catch (e: Exception) {
                    // Si hay excepci√≥n en la API, intentar usar cach√© aunque est√© expirado
                    Log.e(TAG, "‚ùå Error en API: ${e.message}, usando cach√© expirado como respaldo...")
                    usarCacheExpiradoComoUltimoRecurso(cachedData)
                }
            } else {
                // 5. No hay internet: usar cach√© aunque est√© expirado
                Log.d(TAG, "üìµ Sin internet, usando cach√© como respaldo...")
                usarCacheExpiradoComoUltimoRecurso(cachedData)
            }
        } catch (e: Exception) {
            Result.Error("Error inesperado: ${e.message}")
        }
    }

    /**
     * Usa el cach√© expirado como √∫ltimo recurso cuando no hay otra opci√≥n
     */
    private fun usarCacheExpiradoComoUltimoRecurso(
        cachedData: Pair<ProductoConConversiones, Boolean>?
    ): Result<ProductoConConversiones> {
        return if (cachedData != null) {
            val (data, _) = cachedData
            Log.d(TAG, "‚ö†Ô∏è Usando cach√© expirado como √∫ltimo recurso")
            Result.Success(data, isFromCache = true, isCacheExpired = true)
        } else {
            Log.e(TAG, "‚ùå No hay datos en cach√© disponibles")
            Result.Error("No hay conexi√≥n a internet y no hay datos en cach√© disponibles")
        }
    }

    /**
     * Intenta usar el cach√© como respaldo cuando no hay internet o la API falla
     */
    private fun usarCacheComoFallback(context: Context, productoId: Int): Result<ProductoConConversiones> {
        val cachedData = ConversionCacheManager.getConversion(context, productoId)

        return if (cachedData != null) {
            val (data, isValid) = cachedData

            if (isValid) {
                Log.d(TAG, "‚úÖ Usando cach√© v√°lido (no expirado)")
            } else {
                Log.d(TAG, "‚ö†Ô∏è Usando cach√© expirado (sin internet disponible)")
            }

            Result.Success(data, isFromCache = true, isCacheExpired = !isValid)
        } else {
            Log.e(TAG, "‚ùå No hay datos en cach√© disponibles")
            Result.Error("No hay conexi√≥n a internet y no hay datos en cach√© disponibles")
        }
    }
}
